package controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import factory.Factory;
import interfaces.IInputHandler;
import interfaces.IInputNode;
import interfaces.INode;
import interfaces.IOutputHandler;
import interfaces.IOutputNode;
import view.ViewClass;

public class NodeHolder implements IInputHandler{
	private Map<String, IInputNode> inputNodes = new HashMap<String, IInputNode>();
	private Map<String, INode> nodes = new HashMap<String, INode>();
	private Map<String, IOutputNode> outputNodes = new HashMap<String, IOutputNode>();
	private IOutputHandler output;

	public NodeHolder(IOutputHandler output) {
		this.output = output;
	}
	
	public NodeHolder() {
		this.output = new ViewClass();
	}

	public ArrayList<IInputNode> createCircuit() {
		return null;
	}

	public void createNodes(String url) {
		PathReader pr = new PathReader(output);

		for (String s : pr.getLines(url)) {
			if (!s.startsWith("#") && !s.isEmpty()) {

				if (s.contains(":") && s.endsWith(";")) {
					s = s.replace(";", "");
					s = s.replaceAll("\\s+", "");

					String[] parts = s.split(":", 2);

					String name = parts[0];
					String type = parts[1];
					
					if (!nodes.containsKey(name)) {
						try {
							INode node = Factory.createFromName(type);
							node.setLiteralName(name);
							
							if (node.isInput()) {
								inputNodes.put(name, (IInputNode) node);
							} else if (node.isOutput()) {
								IOutputNode newNode = (IOutputNode) node;
								newNode.setOutputHandler(output);
								outputNodes.put(name, (IOutputNode) newNode);
							}
							nodes.put(name, node);
						} catch (Exception e) {
							output.write("Looks like the file you provided has some errors inside of it.\nPlease fix to be able to use this application.");
						}
					} else {
						INode node = nodes.get(name);
						String[] names = type.split(",");
						for(String n : names) {
							node.addOutputNode(nodes.get(n));
							nodes.get(n).heightenInputAmount();
						}
					}
				}
			}
		}
	}
	
	//TODO: before start do some kind of clear on nodes. 2nd run wont work due to existing values.
	@Override
	public void start() {
		for(String n : nodes.keySet()) {
			nodes.get(n).clearValues();
		}
		
		for(String s : inputNodes.keySet()) {
			inputNodes.get(s).doAction();
		}
		
		for(String s : outputNodes.keySet()) {
			if(!outputNodes.get(s).didWork()) {
				output.write("WARING: Node " + outputNodes.get(s).getLiteralName() + " did not work correctly!");
			}
		}
	}

	@Override
	public boolean setCircuit(String s) {
		inputNodes.clear();
		outputNodes.clear();
		nodes.clear();
		
		if(s.endsWith(".txt")) {
			createNodes(s);
			
			if(outputNodes.isEmpty()) {
				output.write("WARNING: Your circuit does not have any output nodes!");
			}
			
			return true;
		} else {
			return false;
		}
			
	}
	
	@Override
	public void showCircuit() {
		for(String name : nodes.keySet()) {
			String outputs = "";
			
			for(INode n : nodes.get(name).getOutputNodes()) {
				outputs += n.getLiteralName() + "(" + n.getName() + "), ";
			}
			
			if(nodes.get(name).getOutputNodes().size() < 1) {
				outputs = "FINAL.";
			} else {
				outputs = outputs.substring(0, outputs.length()-2);
				outputs = outputs + ".";
			}
			
			String circuitString = "NODE: " + nodes.get(name).getLiteralName() + "(" + nodes.get(name).getName() + ") - OUTPUT: " + outputs;
			
			output.write(circuitString);
		}
	}
	
	@Override
	public Map<String, IInputNode> getInputNodes(){
		return this.inputNodes;
		
	}

	@Override
	public void changeInputNodes(List<String> temp) {

		for(String s : temp){
			
			System.out.println(this.inputNodes.get(s));
			IInputnode inputnode = this.inputNodes.get(s);
			if()
			
			
		}
	};
}
