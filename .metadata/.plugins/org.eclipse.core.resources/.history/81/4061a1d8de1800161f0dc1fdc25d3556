package controller;

import java.util.ArrayList;
import java.util.Map;

import interfaces.IInputNode;
import interfaces.INode;
import interfaces.IOutputNode;

public class NodeFactory {
	private Map<String, IInputNode> inputNodes;
	private Map<String, INode> nodes;
	private Map<String, IOutputNode> outputNodes;
	private Map<String, String> nodeTypes;
	
	public NodeFactory() {
		nodeTypes.put("AND", "");
		nodeTypes.put("NOT", "");
		nodeTypes.put("NAND", "");
		nodeTypes.put("NOR", "");
		nodeTypes.put("OR", "");
		nodeTypes.put("XOR", "");
	}
	
	public ArrayList<IInputNode> createCircuit() {
		
		return null;
	}
	
	public void createNodes() {
		PathReader pr = new PathReader();

		for(String s : pr.getLines("C:/Users/Marthijn/Documents/GitHub/designpatterns/Bestanden/circuit1.txt")) {
			if(!s.startsWith("#") && !s.isEmpty()) {
				String name = null;
				
				if(s.contains(":") && s.endsWith(";"))
				{
					s = s.replace(";", "");
					s = s.replaceAll("\\s+", "");
					
					for(String split : s.split(":", 2)) {
						if(name == null) {
							name = split;
						} else {
							if(nodeTypes.containsKey(split)) {
								//Create NODE
							} else {
								//Find name, add output.
							}
						}
					}
					
					s.split(":");
					System.out.println(s);
				}
				
			}
		}
	}
	
	public INode createSingleNode(String name, String type) {
		//if()
	}
}
